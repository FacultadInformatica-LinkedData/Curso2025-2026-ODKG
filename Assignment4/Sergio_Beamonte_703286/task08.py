# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/SergioBeamonte/Curso2025-2026-ODKG/blob/individualAss4/Assignment4/course_materials/notebooks/Task08.ipynb

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

for s, p, o in g1.triples((None, None, None)):
    print(s, p, o)

for s, p, o in g2.triples((None, None, None)):
    print(s, p, o)

from rdflib.namespace import RDF, Namespace

DATAORG = Namespace("http://data.org#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

properties_to_complete = [VCARD.Given, VCARD.Family, VCARD.EMAIL]

for person in g1.subjects(predicate=RDF.type, object=DATAORG.Person):
    print(f"\nComprobando: {person.n3()}")

    for prop in properties_to_complete:


        value_in_g1 = g1.value(subject=person, predicate=prop)

        if value_in_g1 is None:
            print(f"  Falta la propiedad: {prop.n3()}")
            value_from_g2 = g2.value(subject=person, predicate=prop)

            if value_from_g2:
                g1.add((person, prop, value_from_g2))
            else:
                print(f"    (No se encontr√≥ en g2 tampoco)")
        else:

            pass

print("\n--- Proceso Finalizado ---")

print("Contenido final de g1:")

g1.bind("data", DATAORG)
g1.bind("vcard", VCARD)
g1.bind("rdf", RDF)

print(g1.serialize(format="turtle"))