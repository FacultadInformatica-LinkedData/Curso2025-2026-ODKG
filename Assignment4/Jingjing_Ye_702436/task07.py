# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17s3TKU6-FX_oTXKo29zlEArwYvrrZ-vc

**Task 07: Querying RDF(s)**
"""

import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
result = [] #list of tuples

for c in g.subjects(RDF.type, RDFS.Class):
  superclass = list(g.objects(c, RDFS.subClassOf))
  if len(superclass) == 0:
    result.append((c, None))
  else:
    result.append((c, superclass))

# Visualize the results

for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  "Select ?c ?sc WHERE { ?c rdf:type rdfs:Class . OPTIONAL {?c rdfs:subClassOf ?sc .} }"

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

def find_subclasses(c):
    subclasses = set()
    for sub in g.subjects(RDFS.subClassOf, c):
        subclasses.add(sub)
        # Find recursively the subclasses
        subclasses.update(find_subclasses(sub))
    return subclasses

# Classes: Person and all subclasses
all_classes = {ns.Person} | find_subclasses(ns.Person)

# variable to return
individuals = []
for c in all_classes:
    for ind in g.subjects(RDF.type, c):
        individuals.append(ind)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  "PREFIX ns: <http://oeg.fi.upm.es/def/people#> Select ?ind WHERE { ?class rdfs:subClassOf* ns:Person . ?ind rdf:type ?class . }"

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """PREFIX ns: <http://oeg.fi.upm.es/def/people#> select ?name ?type WHERE {?person ns:knows ns:Rocky . ?person rdfs:label ?name . ?person rdf:type ?type .}
"""
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

all_props = set(p for s, p, o in g)
for p in sorted(all_props):
    print(p)

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
select DISTINCT ?name
WHERE {
   ?person ns:hasColleague ?colleague .
  {
    ?colleague ns:ownsPet ?pet .
  } UNION
  {
    ?colleague ns:hasColleague ?colleague2 .
    ?colleague2 ns:ownsPet ?pet .
  }
   ?person rdfs:label ?name .
}
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")