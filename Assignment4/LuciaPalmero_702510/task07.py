# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1li7vOpjIVdOat6VAobuXMI6TJ1dWAZsD

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO

# Visualize the results

result = [] #list of tuples
for s,p,o in g.triples((None, RDF.type, RDFS.Class)):
  objectgiven = g.value(subject=s, predicate=RDFS.subClassOf, object=None)
  result.append((s, objectgiven))
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  "Select ?c ?sc WHERE {?c a rdfs:Class .OPTIONAL { ?c rdfs:subClassOf ?sc . }}"
for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

individuals = []
classes_of_people = []
class_stack = [ns.Person]

while len(class_stack) > 0:
  c = class_stack.pop() #gives the value and eliminates it
  classes_of_people.append(c) #adds the value to the new vector
  for subC in g.subjects(predicate=RDFS.subClassOf, object=c):
    class_stack.append(subC) #add the subclass to the class_stack for later use


print(classes_of_people)
for c in classes_of_people:
  for s,p,o in g.triples((None, RDF.type, c)): #give me every subject that has rdf:type c for each c∈ {Person, Professor, FullProfessor, …}
    individuals.append(s) #we only want the name of the person

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  "Select ?ind WHERE {?ind a ?c. ?c rdfs:subClassOf* ontology:Person.}"

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX : <http://oeg.fi.upm.es/def/people#>
SELECT ?name ?type
WHERE {
  ?subject :knows :Rocky .
  ?subject rdf:type ?type .
  ?subject rdfs:label ?name .
}
"""


# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query =  """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX : <http://oeg.fi.upm.es/def/people#>
SELECT ?name
WHERE {
{
  ?subject :hasColleague ?colleague .
  ?colleague :ownsPet ?pet .
  ?pet rdf:type :Animal .
  ?subject rdfs:label ?name.
}
UNION
  {
    ?subject :hasColleague ?colleague1 .
    ?colleague1 :hasColleague ?colleague2 .
    ?colleague2 :ownsPet ?pet2 .
    ?pet2 rdf:type :Animal .
    ?subject rdfs:label ?name .
  }

}
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")