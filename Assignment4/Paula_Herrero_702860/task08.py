# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J_7QgC7bCbX0wgHnhvPnyOpx62NNmfvi

**Task 08: Completing missing data**
"""

#!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

from rdflib.namespace import RDF

# Namespaces
EX = Namespace("http://data.org#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

# Individuals from class Person in g1
persons = list(g1.subjects(RDF.type, EX.Person))

for p in persons:
  print(p)

# Checking missing values
for person in persons:
  given = list(g1.objects(person, VCARD.Given))
  family = list(g1.objects(person, VCARD.Family))
  email = list(g1.objects(person, VCARD.EMAIL))
  print(f"Person: {person}")
  print(f"Given: {given}")
  print(f"Family: {family}")
  print(f"Email: {email}")
  print("\n")

# Completing missing values
for person in persons:
  given = list(g1.objects(person, VCARD.Given))
  family = list(g1.objects(person, VCARD.Family))
  email = list(g1.objects(person, VCARD.EMAIL))

  if not given:
    for val in g2.objects(person, VCARD.Given):
      g1.add((person, VCARD.Given, val))

  if not family:
    for val in g2.objects(person, VCARD.Family):
          g1.add((person, VCARD.Family, val))

  if not email:
    for val in g2.objects(person, VCARD.EMAIL):
      g1.add((person, VCARD.EMAIL, val))

# Checking the results
for person in persons:
  given = list(g1.objects(person, VCARD.Given))
  family = list(g1.objects(person, VCARD.Family))
  email = list(g1.objects(person, VCARD.EMAIL))
  print(f"Person: {person}")
  print(f"Given: {given}")
  print(f"Family: {family}")
  print(f"Email: {email}")
  print("\n")