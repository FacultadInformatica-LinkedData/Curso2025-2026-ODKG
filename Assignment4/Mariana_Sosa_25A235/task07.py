# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tEBRaWVpgROlA6ZJTtmctveFXuGIOiJs

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
from validation import Report
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

result = []
for c in g.subjects(RDF.type, RDFS.Class):
    sc = g.value(subject=c, predicate=RDFS.subClassOf)
    result.append((c, sc))
for r_ in result:
    print(r_)

# Validation
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?c ?sc
WHERE {
  ?c rdf:type rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""
for r_ in g.query(query):
    print(r_.c, r_.sc)

# Validation
report.validate_07_1b(query, g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

person_subclasses = set(g.transitive_subjects(RDFS.subClassOf, ns.Person))
all_person_classes = person_subclasses | {ns.Person}

individuals = []
for c in all_person_classes:
    for ind in g.subjects(RDF.type, c):
        individuals.append(ind)

for i in individuals:
    print(i)

# Validation
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ont:  <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?ind
WHERE {
  ?ind rdf:type ?t .
  ?t rdfs:subClassOf* ont:Person .
}
"""
for r_ in g.query(query):
    print(r_.ind)

# Validation
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX :    <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name ?type
WHERE {
  ?person :knows :Rocky .
  ?person rdfs:label ?name .
  ?person rdf:type ?type .
}
"""

for r in g.query(query):
    print(r.name, r.type)

# Validation
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ont:  <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name
WHERE {
  ?x  rdf:type ?t .
  ?t  rdfs:subClassOf* ont:Professor .
  ?x  rdfs:label ?name .
}
"""
for r in g.query(query):
    print(r.name)

# Validation
report.validate_07_04(g, query)
report.save_report("_Task_07")